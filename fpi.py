import asyncio
import aiohttp
from datetime import datetime, timedelta
import configparser
import os
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.handler import CancelHandler
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ChatPermissions
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_log.txt'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

START_TIME = datetime.now()

class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, limit=3, timeout=3):
        self.limit = limit
        self.timeout = timeout
        self.user_timeouts = {}
        super(ThrottlingMiddleware, self).__init__()

    async def on_process_message(self, message: types.Message, _):
        user_id = message.from_user.id
        current_time = time.time()
        
        if user_id not in self.user_timeouts:
            self.user_timeouts[user_id] = []
        
        self.user_timeouts[user_id] = [t for t in self.user_timeouts[user_id] 
                                     if current_time - t < self.timeout]
        
        if len(self.user_timeouts[user_id]) >= self.limit:
            remaining_time = round(self.timeout - (current_time - self.user_timeouts[user_id][0]))
            await message.answer(
                f"‚ö†Ô∏è *–§–ª—É–¥-–∫–æ–Ω—Ç—Ä–æ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n"
                f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π.",
                parse_mode="Markdown"
            )
            raise CancelHandler()
        
        self.user_timeouts[user_id].append(current_time)

class Config:
    def __init__(self, filename='config.ini'):
        self.filename = filename
        self.config = configparser.ConfigParser()
        self.load_config()

    def load_config(self):
        if os.path.exists(self.filename):
            self.config.read(self.filename)
        self.init_default_config()

    def init_default_config(self):
        if 'Bot' not in self.config:
            self.config['Bot'] = {'token': 'YOUR_BOT_TOKEN'}
        if 'Admin' not in self.config:
            self.config['Admin'] = {'admin_ids': '123456789'}
        if 'Chat' not in self.config:
            self.config['Chat'] = {'main_chat_id': '-1001234567890'}
        if 'Stats' not in self.config:
            self.config['Stats'] = {
                'total_users': '0',
                'coin_requests': '0',
                'daily_activity': '0',
                'unique_users': '[]'
            }
        self.save_config()

    def save_config(self):
        with open(self.filename, 'w') as configfile:
            self.config.write(configfile)

    def update_stats(self, user_id, command=None):
        if 'Stats' not in self.config:
            self.config['Stats'] = {}
        
        users = eval(self.config['Stats'].get('unique_users', '[]'))
        if user_id not in users:
            users.append(user_id)
            self.config['Stats']['unique_users'] = str(users)
            self.config['Stats']['total_users'] = str(len(users))

        if command == '/coin':
            coin_requests = int(self.config['Stats'].get('coin_requests', 0))
            self.config['Stats']['coin_requests'] = str(coin_requests + 1)

        daily_activity = int(self.config['Stats'].get('daily_activity', 0))
        self.config['Stats']['daily_activity'] = str(daily_activity + 1)
        
        self.save_config()

    def reset_daily_stats(self):
        self.config['Stats']['daily_activity'] = '0'
        self.save_config()

    def get_system_stats(self):
        try:
            # CPU
            cpu_usage = 0
            try:
                with open('/sys/class/thermal/thermal_zone0/temp') as f:
                    cpu_temp = float(f.read().strip()) / 1000
                    cpu_usage = cpu_temp
            except:
                pass

            # RAM
            ram_usage = 0
            try:
                with open('/proc/meminfo') as f:
                    lines = f.readlines()
                    total = int(lines[0].split()[1])
                    available = int(lines[2].split()[1])
                    ram_usage = round(((total - available) / total) * 100, 2)
            except:
                pass

            return round(cpu_usage, 2), round(ram_usage, 2)
        except:
            return 0, 0

config = Config()
bot = Bot(token=config.config['Bot']['token'])
dp = Dispatcher(bot)
dp.middleware.setup(ThrottlingMiddleware())

timeframes_kb = InlineKeyboardMarkup(row_width=3)
timeframes_kb.add(
    InlineKeyboardButton('5M üìä', callback_data='tf_5m'),
    InlineKeyboardButton('30M üìà', callback_data='tf_30m'),
    InlineKeyboardButton('1H üìâ', callback_data='tf_1h'),
    InlineKeyboardButton('1D üíπ', callback_data='tf_1d'),
    InlineKeyboardButton('ALL üìä', callback_data='tf_all')
)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    try:
        config.update_stats(message.from_user.id)
        welcome_text = (
            "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FPIBANK!*\n\n"
            "ü§ñ –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n"
            "üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /coin —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å\n"
            "‚ÑπÔ∏è /about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ\n"
            "üì¢ /all - –ø–∏–Ω–≥–∞–Ω—É—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
            "üë• /mod - –ø–∏–Ω–≥–∞–Ω—É—Ç—å –∞–¥–º–∏–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
        )
        await message.answer(welcome_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"Error in welcome command: {e}")

@dp.message_handler(commands=['about'])
async def show_about(message: types.Message):
    try:
        about_text = (
            "üë®‚Äçüíª *Creator:* –ù–µ–∫—Ç–æ—Ä\n"
            "üì± *Contact:* @purplekiller\n"
            "üåü –∞–π –∞–π –∞–π —ç—â–∫–µ—Ä–µ 1488"
        )
        await message.answer(about_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"Error in about command: {e}")

@dp.message_handler(commands=['stat'])
async def show_stats(message: types.Message):
    try:
        if str(message.from_user.id) not in config.config['Admin']['admin_ids'].split(','):
            return
        
        cpu_usage, ram_usage = config.get_system_stats()
        uptime = datetime.now() - START_TIME
        hours = uptime.total_seconds() // 3600
        minutes = (uptime.total_seconds() % 3600) // 60
        
        stats_message = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
            "*üíª –°–∏—Å—Ç–µ–º–∞:*\n"
            f"üîÑ CPU: {cpu_usage}%\n"
            f"üíæ RAM: {ram_usage}%\n"
            f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {int(hours)}—á {int(minutes)}–º\n\n"
            "*üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
            f"üìà –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {config.config['Stats']['total_users']}\n"
            f"üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π /coin: {config.config['Stats']['coin_requests']}\n"
            f"üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è: {config.config['Stats']['daily_activity']} –∫–æ–º–∞–Ω–¥\n"
        )
        
        await message.answer(stats_message, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"Error in stat command: {e}")

async def get_pair_data():
    pair_address = 'eqayrrajgsuyhrggo1himnbgv9tvlndz3uoclaoytw_fgegd'
    url = f'https://api.dexscreener.com/latest/dex/pairs/ton/{pair_address}'
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            return await response.json()

@dp.message_handler(commands=['coin'])
async def show_coin_info(message: types.Message):
    try:
        config.update_stats(message.from_user.id, '/coin')
        
        data = await get_pair_data()
        pair_data = data['pairs'][0]
        
        price = float(pair_data['priceUsd'])
        price_change_24h = float(pair_data['priceChange']['h24'])
        market_cap = float(pair_data.get('fdv', 0))
        liquidity = float(pair_data.get('liquidity', {}).get('usd', 0))
        volume_24h = float(pair_data.get('volume', {}).get('h24', 0))
        
        trend = "üìà –†–∞—Å—Ç—ë—Ç" if price_change_24h > 0 else "üìâ –ü–∞–¥–∞–µ—Ç"
        current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        
        message_text = (
            "üè¶ *FPIBANK Price Analysis*\n\n"
            f"üí∞ –¶–µ–Ω–∞: ${price:.6f}\n"
            f"üìä 24h: {price_change_24h:+.2f}%\n"
            f"üìà –¢—Ä–µ–Ω–¥: {trend}\n\n"
            f"üìä *–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*\n"
            f"üíé Market Cap: ${market_cap:,.2f}\n"
            f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${liquidity:,.2f}\n"
            f"üìà –û–±—ä—ë–º (24h): ${volume_24h:,.2f}\n\n"
            f"üïí {current_time}"
        )

        await message.answer(
            message_text,
            parse_mode="Markdown",
            reply_markup=timeframes_kb
        )
        
    except Exception as e:
        logger.error(f"Error in coin command: {e}")
        error_message = "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        await message.answer(error_message, parse_mode="Markdown")

@dp.callback_query_handler(lambda c: c.data.startswith('tf_'))
async def process_timeframe(callback_query: types.CallbackQuery):
    try:
        timeframe = callback_query.data.split('_')[1]
        
        data = await get_pair_data()
        pair_data = data['pairs'][0]
        
        timeframe_text = {
            '5m': '5 –º–∏–Ω—É—Ç',
            '30m': '30 –º–∏–Ω—É—Ç',
            '1h': '1 —á–∞—Å',
            '1d': '24 —á–∞—Å–∞',
            'all': '–≤—Å—ë –≤—Ä–µ–º—è'
        }
        
        price_changes = {
            '5m': pair_data['priceChange'].get('m5', 0),
            '30m': pair_data['priceChange'].get('m30', 0),
            '1h': pair_data['priceChange'].get('h1', 0),
            '1d': pair_data['priceChange'].get('h24', 0),
            'all': pair_data['priceChange'].get('h24', 0)
        }
        
        price = float(pair_data['priceUsd'])
        change = price_changes[timeframe]
        
        trend = "üìà –†–∞—Å—Ç—ë—Ç" if float(change) > 0 else "üìâ –ü–∞–¥–∞–µ—Ç"
        
        message_text = (
            f"üè¶ *FPIBANK - –ê–Ω–∞–ª–∏–∑ –∑–∞ {timeframe_text[timeframe]}*\n\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${price:.6f}\n"
            f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change:+.2f}%\n"
            f"üìà –¢—Ä–µ–Ω–¥: {trend}\n\n"
            f"üïí {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        )
        
        await callback_query.message.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=timeframes_kb
        )
        
    except Exception as e:
        logger.error(f"Error in timeframe callback: {e}")
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=timeframes_kb
        )

    await callback_query.answer()

@dp.message_handler(commands=['all'])
async def ping_all(message: types.Message):
    try:
        if str(message.chat.id) != config.config['Chat']['main_chat_id']:
            return
            
        member = await message.chat.get_member(message.from_user.id)
        if member.status not in ['creator', 'administrator']:
            await message.reply(
                "‚ùå *–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞*\n"
                "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!",
                parse_mode="Markdown"
            )
            return

        status_msg = await message.answer("üîÑ *–°–æ–±–∏—Ä–∞—é —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...*", parse_mode="Markdown")
        
        try:
            members = []
            async for member in message.chat.get_members():
                if not member.user.is_bot:
                    members.append(member.user)

            if len(members) > 0:
                tags = []
                for member in members:
                    tag = f"[{member.first_name}](tg://user?id={member.id})"
                    tags.append(tag)
                    if len(' '.join(tags)) > 3500:
                        await message.answer(
                            "üì¢ *–í–Ω–∏–º–∞–Ω–∏–µ!*\n\n" + ' '.join(tags),
                            parse_mode="Markdown"
                        )
                        tags = []
                if tags:
                    await message.answer(
                        "üì¢ *–í–Ω–∏–º–∞–Ω–∏–µ!*\n\n" + ' '.join(tags),
                        parse_mode="Markdown"
                    )
                await status_msg.delete()
            else:
                await status_msg.edit_text(
                    "‚ùå *–û—à–∏–±–∫–∞*\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!",
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"Error in ping_all: {e}")
            await status_msg.edit_text(
                "‚ùå *–û—à–∏–±–∫–∞*\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!",
                parse_mode="Markdown"
            )

    except Exception as e:
        logger.error(f"Error in ping_all (outer): {e}")
        await message.reply(
            "‚ùå *–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞*\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!",
            parse_mode="Markdown"
        )

@dp.message_handler(commands=['mod'])
async def ping_mods(message: types.Message):
    try:
        if str(message.chat.id) != config.config['Chat']['main_chat_id']:
            return
            
        member = await message.chat.get_member(message.from_user.id)
        if member.status not in ['creator', 'administrator']:
            await message.reply(
                "‚ùå *–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞*\n"
                "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!",
                parse_mode="Markdown"
            )
            return

        status_msg = await message.answer("üîÑ *–°–æ–±–∏—Ä–∞—é —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...*", parse_mode="Markdown")
        
        try:
            admins = []
            async for member in message.chat.get_members(filter="administrators"):
                if not member.user.is_bot:
                    admins.append(member.user)

            if len(admins) > 0:
                tags = []
                for admin in admins:
                    tag = f"[{admin.first_name}](tg://user?id={admin.id})"
                    tags.append(tag)
                await status_msg.edit_text(
                    "üë• *–í–Ω–∏–º–∞–Ω–∏–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã!*\n\n" + ' '.join(tags),
                    parse_mode="Markdown"
                )
            else:
                await status_msg.edit_text(
                    "‚ùå *–û—à–∏–±–∫–∞*\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!",
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"Error in ping_mods: {e}")
            await status_msg.edit_text(
                "‚ùå *–û—à–∏–±–∫–∞*\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!",
                parse_mode="Markdown"
            )

    except Exception as e:
        logger.error(f"Error in ping_mods (outer): {e}")
        await message.reply(
            "‚ùå *–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞*\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!",
            parse_mode="Markdown"
        )

@dp.message_handler(content_types=['new_chat_members'])
async def welcome_new_member(message: types.Message):
    try:
        if str(message.chat.id) != config.config['Chat']['main_chat_id']:
            return
            
        for new_member in message.new_chat_members:
            if not new_member.is_bot:
                welcome_text = (
                    "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç FPI-–ö–ª–∞–Ω!\n\n"
                    "ü§ñ –£ –Ω–∞—Å –µ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ—Ç: @Fpiclan_bot\n\n"
                    "üë• –ù–∞–º —Ç—Ä–µ–±—É—é—Ç—Å—è:\n"
                    "‚Ä¢ üì£ –†–µ–∫–ª–∞–º—â–∏–∫–∏\n"
                    "‚Ä¢ üí° –ò–¥–µ–∏ –¥–ª—è —Å–∞–π—Ç–∞\n"
                    "‚Ä¢ üé® –î–∏–∑–∞–π–Ω–µ—Ä—ã –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Å–∞–π—Ç–∞"
                )
                await message.answer(welcome_text)

    except Exception as e:
        logger.error(f"Error in welcome message: {e}")

async def reset_daily_stats():
    while True:
        try:
            now = datetime.now()
            next_day = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
            if now >= next_day:
                next_day = next_day.replace(day=next_day.day + 1)
            await asyncio.sleep((next_day - now).seconds)
            config.reset_daily_stats()
        except Exception as e:
            logger.error(f"Error in reset_daily_stats: {e}")
            await asyncio.sleep(60)

if __name__ == '__main__':
    from aiogram import executor
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.create_task(reset_daily_stats())
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logger.error(f"Main loop error: {e}")
